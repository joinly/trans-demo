/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gd.trans.example.demo.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-10-16")
public class FreezeModel implements org.apache.thrift.TBase<FreezeModel, FreezeModel._Fields>, java.io.Serializable, Cloneable, Comparable<FreezeModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FreezeModel");

  private static final org.apache.thrift.protocol.TField BIZ_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("coinType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("remarks", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FreezeModelStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FreezeModelTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String bizNo; // required
  public @org.apache.thrift.annotation.Nullable String coinType; // required
  public @org.apache.thrift.annotation.Nullable String username; // required
  public @org.apache.thrift.annotation.Nullable String balance; // required
  public @org.apache.thrift.annotation.Nullable String remarks; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIZ_NO((short)1, "bizNo"),
    COIN_TYPE((short)2, "coinType"),
    USERNAME((short)3, "username"),
    BALANCE((short)4, "balance"),
    REMARKS((short)5, "remarks");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIZ_NO
          return BIZ_NO;
        case 2: // COIN_TYPE
          return COIN_TYPE;
        case 3: // USERNAME
          return USERNAME;
        case 4: // BALANCE
          return BALANCE;
        case 5: // REMARKS
          return REMARKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.REMARKS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIZ_NO, new org.apache.thrift.meta_data.FieldMetaData("bizNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("coinType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARKS, new org.apache.thrift.meta_data.FieldMetaData("remarks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FreezeModel.class, metaDataMap);
  }

  public FreezeModel() {
  }

  public FreezeModel(
    String bizNo,
    String coinType,
    String username,
    String balance)
  {
    this();
    this.bizNo = bizNo;
    this.coinType = coinType;
    this.username = username;
    this.balance = balance;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FreezeModel(FreezeModel other) {
    if (other.isSetBizNo()) {
      this.bizNo = other.bizNo;
    }
    if (other.isSetCoinType()) {
      this.coinType = other.coinType;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetBalance()) {
      this.balance = other.balance;
    }
    if (other.isSetRemarks()) {
      this.remarks = other.remarks;
    }
  }

  public FreezeModel deepCopy() {
    return new FreezeModel(this);
  }

  @Override
  public void clear() {
    this.bizNo = null;
    this.coinType = null;
    this.username = null;
    this.balance = null;
    this.remarks = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getBizNo() {
    return this.bizNo;
  }

  public FreezeModel setBizNo(@org.apache.thrift.annotation.Nullable String bizNo) {
    this.bizNo = bizNo;
    return this;
  }

  public void unsetBizNo() {
    this.bizNo = null;
  }

  /** Returns true if field bizNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBizNo() {
    return this.bizNo != null;
  }

  public void setBizNoIsSet(boolean value) {
    if (!value) {
      this.bizNo = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCoinType() {
    return this.coinType;
  }

  public FreezeModel setCoinType(@org.apache.thrift.annotation.Nullable String coinType) {
    this.coinType = coinType;
    return this;
  }

  public void unsetCoinType() {
    this.coinType = null;
  }

  /** Returns true if field coinType is set (has been assigned a value) and false otherwise */
  public boolean isSetCoinType() {
    return this.coinType != null;
  }

  public void setCoinTypeIsSet(boolean value) {
    if (!value) {
      this.coinType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getUsername() {
    return this.username;
  }

  public FreezeModel setUsername(@org.apache.thrift.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getBalance() {
    return this.balance;
  }

  public FreezeModel setBalance(@org.apache.thrift.annotation.Nullable String balance) {
    this.balance = balance;
    return this;
  }

  public void unsetBalance() {
    this.balance = null;
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return this.balance != null;
  }

  public void setBalanceIsSet(boolean value) {
    if (!value) {
      this.balance = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getRemarks() {
    return this.remarks;
  }

  public FreezeModel setRemarks(@org.apache.thrift.annotation.Nullable String remarks) {
    this.remarks = remarks;
    return this;
  }

  public void unsetRemarks() {
    this.remarks = null;
  }

  /** Returns true if field remarks is set (has been assigned a value) and false otherwise */
  public boolean isSetRemarks() {
    return this.remarks != null;
  }

  public void setRemarksIsSet(boolean value) {
    if (!value) {
      this.remarks = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case BIZ_NO:
      if (value == null) {
        unsetBizNo();
      } else {
        setBizNo((String)value);
      }
      break;

    case COIN_TYPE:
      if (value == null) {
        unsetCoinType();
      } else {
        setCoinType((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((String)value);
      }
      break;

    case REMARKS:
      if (value == null) {
        unsetRemarks();
      } else {
        setRemarks((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIZ_NO:
      return getBizNo();

    case COIN_TYPE:
      return getCoinType();

    case USERNAME:
      return getUsername();

    case BALANCE:
      return getBalance();

    case REMARKS:
      return getRemarks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIZ_NO:
      return isSetBizNo();
    case COIN_TYPE:
      return isSetCoinType();
    case USERNAME:
      return isSetUsername();
    case BALANCE:
      return isSetBalance();
    case REMARKS:
      return isSetRemarks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FreezeModel)
      return this.equals((FreezeModel)that);
    return false;
  }

  public boolean equals(FreezeModel that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bizNo = true && this.isSetBizNo();
    boolean that_present_bizNo = true && that.isSetBizNo();
    if (this_present_bizNo || that_present_bizNo) {
      if (!(this_present_bizNo && that_present_bizNo))
        return false;
      if (!this.bizNo.equals(that.bizNo))
        return false;
    }

    boolean this_present_coinType = true && this.isSetCoinType();
    boolean that_present_coinType = true && that.isSetCoinType();
    if (this_present_coinType || that_present_coinType) {
      if (!(this_present_coinType && that_present_coinType))
        return false;
      if (!this.coinType.equals(that.coinType))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (!this.balance.equals(that.balance))
        return false;
    }

    boolean this_present_remarks = true && this.isSetRemarks();
    boolean that_present_remarks = true && that.isSetRemarks();
    if (this_present_remarks || that_present_remarks) {
      if (!(this_present_remarks && that_present_remarks))
        return false;
      if (!this.remarks.equals(that.remarks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBizNo()) ? 131071 : 524287);
    if (isSetBizNo())
      hashCode = hashCode * 8191 + bizNo.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoinType()) ? 131071 : 524287);
    if (isSetCoinType())
      hashCode = hashCode * 8191 + coinType.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetBalance()) ? 131071 : 524287);
    if (isSetBalance())
      hashCode = hashCode * 8191 + balance.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemarks()) ? 131071 : 524287);
    if (isSetRemarks())
      hashCode = hashCode * 8191 + remarks.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FreezeModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBizNo()).compareTo(other.isSetBizNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizNo, other.bizNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoinType()).compareTo(other.isSetCoinType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoinType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coinType, other.coinType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemarks()).compareTo(other.isSetRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remarks, other.remarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FreezeModel(");
    boolean first = true;

    sb.append("bizNo:");
    if (this.bizNo == null) {
      sb.append("null");
    } else {
      sb.append(this.bizNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coinType:");
    if (this.coinType == null) {
      sb.append("null");
    } else {
      sb.append(this.coinType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    if (this.balance == null) {
      sb.append("null");
    } else {
      sb.append(this.balance);
    }
    first = false;
    if (isSetRemarks()) {
      if (!first) sb.append(", ");
      sb.append("remarks:");
      if (this.remarks == null) {
        sb.append("null");
      } else {
        sb.append(this.remarks);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (bizNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bizNo' was not present! Struct: " + toString());
    }
    if (coinType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'coinType' was not present! Struct: " + toString());
    }
    if (username == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
    }
    if (balance == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'balance' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FreezeModelStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FreezeModelStandardScheme getScheme() {
      return new FreezeModelStandardScheme();
    }
  }

  private static class FreezeModelStandardScheme extends org.apache.thrift.scheme.StandardScheme<FreezeModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FreezeModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIZ_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bizNo = iprot.readString();
              struct.setBizNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coinType = iprot.readString();
              struct.setCoinTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.balance = iprot.readString();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remarks = iprot.readString();
              struct.setRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FreezeModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bizNo != null) {
        oprot.writeFieldBegin(BIZ_NO_FIELD_DESC);
        oprot.writeString(struct.bizNo);
        oprot.writeFieldEnd();
      }
      if (struct.coinType != null) {
        oprot.writeFieldBegin(COIN_TYPE_FIELD_DESC);
        oprot.writeString(struct.coinType);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.balance != null) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        oprot.writeString(struct.balance);
        oprot.writeFieldEnd();
      }
      if (struct.remarks != null) {
        if (struct.isSetRemarks()) {
          oprot.writeFieldBegin(REMARKS_FIELD_DESC);
          oprot.writeString(struct.remarks);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FreezeModelTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FreezeModelTupleScheme getScheme() {
      return new FreezeModelTupleScheme();
    }
  }

  private static class FreezeModelTupleScheme extends org.apache.thrift.scheme.TupleScheme<FreezeModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FreezeModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.bizNo);
      oprot.writeString(struct.coinType);
      oprot.writeString(struct.username);
      oprot.writeString(struct.balance);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRemarks()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRemarks()) {
        oprot.writeString(struct.remarks);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FreezeModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.bizNo = iprot.readString();
      struct.setBizNoIsSet(true);
      struct.coinType = iprot.readString();
      struct.setCoinTypeIsSet(true);
      struct.username = iprot.readString();
      struct.setUsernameIsSet(true);
      struct.balance = iprot.readString();
      struct.setBalanceIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.remarks = iprot.readString();
        struct.setRemarksIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

