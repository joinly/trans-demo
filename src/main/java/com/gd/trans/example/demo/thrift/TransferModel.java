/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gd.trans.example.demo.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-10-16")
public class TransferModel implements org.apache.thrift.TBase<TransferModel, TransferModel._Fields>, java.io.Serializable, Cloneable, Comparable<TransferModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransferModel");

  private static final org.apache.thrift.protocol.TField BIZ_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("bizNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("coinType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUsername", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TO_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toUsername", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRANS_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transAmount", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("remarks", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransferModelStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransferModelTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String bizNo; // required
  public @org.apache.thrift.annotation.Nullable String coinType; // required
  public @org.apache.thrift.annotation.Nullable String transType; // required
  public @org.apache.thrift.annotation.Nullable String fromUsername; // required
  public @org.apache.thrift.annotation.Nullable String toUsername; // required
  public @org.apache.thrift.annotation.Nullable String transAmount; // required
  public @org.apache.thrift.annotation.Nullable String remarks; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIZ_NO((short)1, "bizNo"),
    COIN_TYPE((short)2, "coinType"),
    TRANS_TYPE((short)3, "transType"),
    FROM_USERNAME((short)4, "fromUsername"),
    TO_USERNAME((short)5, "toUsername"),
    TRANS_AMOUNT((short)6, "transAmount"),
    REMARKS((short)7, "remarks");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIZ_NO
          return BIZ_NO;
        case 2: // COIN_TYPE
          return COIN_TYPE;
        case 3: // TRANS_TYPE
          return TRANS_TYPE;
        case 4: // FROM_USERNAME
          return FROM_USERNAME;
        case 5: // TO_USERNAME
          return TO_USERNAME;
        case 6: // TRANS_AMOUNT
          return TRANS_AMOUNT;
        case 7: // REMARKS
          return REMARKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.REMARKS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIZ_NO, new org.apache.thrift.meta_data.FieldMetaData("bizNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("coinType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("fromUsername", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("toUsername", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("transAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARKS, new org.apache.thrift.meta_data.FieldMetaData("remarks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransferModel.class, metaDataMap);
  }

  public TransferModel() {
  }

  public TransferModel(
    String bizNo,
    String coinType,
    String transType,
    String fromUsername,
    String toUsername,
    String transAmount)
  {
    this();
    this.bizNo = bizNo;
    this.coinType = coinType;
    this.transType = transType;
    this.fromUsername = fromUsername;
    this.toUsername = toUsername;
    this.transAmount = transAmount;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransferModel(TransferModel other) {
    if (other.isSetBizNo()) {
      this.bizNo = other.bizNo;
    }
    if (other.isSetCoinType()) {
      this.coinType = other.coinType;
    }
    if (other.isSetTransType()) {
      this.transType = other.transType;
    }
    if (other.isSetFromUsername()) {
      this.fromUsername = other.fromUsername;
    }
    if (other.isSetToUsername()) {
      this.toUsername = other.toUsername;
    }
    if (other.isSetTransAmount()) {
      this.transAmount = other.transAmount;
    }
    if (other.isSetRemarks()) {
      this.remarks = other.remarks;
    }
  }

  public TransferModel deepCopy() {
    return new TransferModel(this);
  }

  @Override
  public void clear() {
    this.bizNo = null;
    this.coinType = null;
    this.transType = null;
    this.fromUsername = null;
    this.toUsername = null;
    this.transAmount = null;
    this.remarks = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getBizNo() {
    return this.bizNo;
  }

  public TransferModel setBizNo(@org.apache.thrift.annotation.Nullable String bizNo) {
    this.bizNo = bizNo;
    return this;
  }

  public void unsetBizNo() {
    this.bizNo = null;
  }

  /** Returns true if field bizNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBizNo() {
    return this.bizNo != null;
  }

  public void setBizNoIsSet(boolean value) {
    if (!value) {
      this.bizNo = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCoinType() {
    return this.coinType;
  }

  public TransferModel setCoinType(@org.apache.thrift.annotation.Nullable String coinType) {
    this.coinType = coinType;
    return this;
  }

  public void unsetCoinType() {
    this.coinType = null;
  }

  /** Returns true if field coinType is set (has been assigned a value) and false otherwise */
  public boolean isSetCoinType() {
    return this.coinType != null;
  }

  public void setCoinTypeIsSet(boolean value) {
    if (!value) {
      this.coinType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getTransType() {
    return this.transType;
  }

  public TransferModel setTransType(@org.apache.thrift.annotation.Nullable String transType) {
    this.transType = transType;
    return this;
  }

  public void unsetTransType() {
    this.transType = null;
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return this.transType != null;
  }

  public void setTransTypeIsSet(boolean value) {
    if (!value) {
      this.transType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getFromUsername() {
    return this.fromUsername;
  }

  public TransferModel setFromUsername(@org.apache.thrift.annotation.Nullable String fromUsername) {
    this.fromUsername = fromUsername;
    return this;
  }

  public void unsetFromUsername() {
    this.fromUsername = null;
  }

  /** Returns true if field fromUsername is set (has been assigned a value) and false otherwise */
  public boolean isSetFromUsername() {
    return this.fromUsername != null;
  }

  public void setFromUsernameIsSet(boolean value) {
    if (!value) {
      this.fromUsername = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getToUsername() {
    return this.toUsername;
  }

  public TransferModel setToUsername(@org.apache.thrift.annotation.Nullable String toUsername) {
    this.toUsername = toUsername;
    return this;
  }

  public void unsetToUsername() {
    this.toUsername = null;
  }

  /** Returns true if field toUsername is set (has been assigned a value) and false otherwise */
  public boolean isSetToUsername() {
    return this.toUsername != null;
  }

  public void setToUsernameIsSet(boolean value) {
    if (!value) {
      this.toUsername = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getTransAmount() {
    return this.transAmount;
  }

  public TransferModel setTransAmount(@org.apache.thrift.annotation.Nullable String transAmount) {
    this.transAmount = transAmount;
    return this;
  }

  public void unsetTransAmount() {
    this.transAmount = null;
  }

  /** Returns true if field transAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransAmount() {
    return this.transAmount != null;
  }

  public void setTransAmountIsSet(boolean value) {
    if (!value) {
      this.transAmount = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getRemarks() {
    return this.remarks;
  }

  public TransferModel setRemarks(@org.apache.thrift.annotation.Nullable String remarks) {
    this.remarks = remarks;
    return this;
  }

  public void unsetRemarks() {
    this.remarks = null;
  }

  /** Returns true if field remarks is set (has been assigned a value) and false otherwise */
  public boolean isSetRemarks() {
    return this.remarks != null;
  }

  public void setRemarksIsSet(boolean value) {
    if (!value) {
      this.remarks = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case BIZ_NO:
      if (value == null) {
        unsetBizNo();
      } else {
        setBizNo((String)value);
      }
      break;

    case COIN_TYPE:
      if (value == null) {
        unsetCoinType();
      } else {
        setCoinType((String)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((String)value);
      }
      break;

    case FROM_USERNAME:
      if (value == null) {
        unsetFromUsername();
      } else {
        setFromUsername((String)value);
      }
      break;

    case TO_USERNAME:
      if (value == null) {
        unsetToUsername();
      } else {
        setToUsername((String)value);
      }
      break;

    case TRANS_AMOUNT:
      if (value == null) {
        unsetTransAmount();
      } else {
        setTransAmount((String)value);
      }
      break;

    case REMARKS:
      if (value == null) {
        unsetRemarks();
      } else {
        setRemarks((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIZ_NO:
      return getBizNo();

    case COIN_TYPE:
      return getCoinType();

    case TRANS_TYPE:
      return getTransType();

    case FROM_USERNAME:
      return getFromUsername();

    case TO_USERNAME:
      return getToUsername();

    case TRANS_AMOUNT:
      return getTransAmount();

    case REMARKS:
      return getRemarks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIZ_NO:
      return isSetBizNo();
    case COIN_TYPE:
      return isSetCoinType();
    case TRANS_TYPE:
      return isSetTransType();
    case FROM_USERNAME:
      return isSetFromUsername();
    case TO_USERNAME:
      return isSetToUsername();
    case TRANS_AMOUNT:
      return isSetTransAmount();
    case REMARKS:
      return isSetRemarks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransferModel)
      return this.equals((TransferModel)that);
    return false;
  }

  public boolean equals(TransferModel that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bizNo = true && this.isSetBizNo();
    boolean that_present_bizNo = true && that.isSetBizNo();
    if (this_present_bizNo || that_present_bizNo) {
      if (!(this_present_bizNo && that_present_bizNo))
        return false;
      if (!this.bizNo.equals(that.bizNo))
        return false;
    }

    boolean this_present_coinType = true && this.isSetCoinType();
    boolean that_present_coinType = true && that.isSetCoinType();
    if (this_present_coinType || that_present_coinType) {
      if (!(this_present_coinType && that_present_coinType))
        return false;
      if (!this.coinType.equals(that.coinType))
        return false;
    }

    boolean this_present_transType = true && this.isSetTransType();
    boolean that_present_transType = true && that.isSetTransType();
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (!this.transType.equals(that.transType))
        return false;
    }

    boolean this_present_fromUsername = true && this.isSetFromUsername();
    boolean that_present_fromUsername = true && that.isSetFromUsername();
    if (this_present_fromUsername || that_present_fromUsername) {
      if (!(this_present_fromUsername && that_present_fromUsername))
        return false;
      if (!this.fromUsername.equals(that.fromUsername))
        return false;
    }

    boolean this_present_toUsername = true && this.isSetToUsername();
    boolean that_present_toUsername = true && that.isSetToUsername();
    if (this_present_toUsername || that_present_toUsername) {
      if (!(this_present_toUsername && that_present_toUsername))
        return false;
      if (!this.toUsername.equals(that.toUsername))
        return false;
    }

    boolean this_present_transAmount = true && this.isSetTransAmount();
    boolean that_present_transAmount = true && that.isSetTransAmount();
    if (this_present_transAmount || that_present_transAmount) {
      if (!(this_present_transAmount && that_present_transAmount))
        return false;
      if (!this.transAmount.equals(that.transAmount))
        return false;
    }

    boolean this_present_remarks = true && this.isSetRemarks();
    boolean that_present_remarks = true && that.isSetRemarks();
    if (this_present_remarks || that_present_remarks) {
      if (!(this_present_remarks && that_present_remarks))
        return false;
      if (!this.remarks.equals(that.remarks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBizNo()) ? 131071 : 524287);
    if (isSetBizNo())
      hashCode = hashCode * 8191 + bizNo.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoinType()) ? 131071 : 524287);
    if (isSetCoinType())
      hashCode = hashCode * 8191 + coinType.hashCode();

    hashCode = hashCode * 8191 + ((isSetTransType()) ? 131071 : 524287);
    if (isSetTransType())
      hashCode = hashCode * 8191 + transType.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromUsername()) ? 131071 : 524287);
    if (isSetFromUsername())
      hashCode = hashCode * 8191 + fromUsername.hashCode();

    hashCode = hashCode * 8191 + ((isSetToUsername()) ? 131071 : 524287);
    if (isSetToUsername())
      hashCode = hashCode * 8191 + toUsername.hashCode();

    hashCode = hashCode * 8191 + ((isSetTransAmount()) ? 131071 : 524287);
    if (isSetTransAmount())
      hashCode = hashCode * 8191 + transAmount.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemarks()) ? 131071 : 524287);
    if (isSetRemarks())
      hashCode = hashCode * 8191 + remarks.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TransferModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBizNo()).compareTo(other.isSetBizNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizNo, other.bizNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoinType()).compareTo(other.isSetCoinType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoinType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coinType, other.coinType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromUsername()).compareTo(other.isSetFromUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUsername, other.fromUsername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUsername()).compareTo(other.isSetToUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUsername, other.toUsername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransAmount()).compareTo(other.isSetTransAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transAmount, other.transAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemarks()).compareTo(other.isSetRemarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remarks, other.remarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransferModel(");
    boolean first = true;

    sb.append("bizNo:");
    if (this.bizNo == null) {
      sb.append("null");
    } else {
      sb.append(this.bizNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coinType:");
    if (this.coinType == null) {
      sb.append("null");
    } else {
      sb.append(this.coinType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    if (this.transType == null) {
      sb.append("null");
    } else {
      sb.append(this.transType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromUsername:");
    if (this.fromUsername == null) {
      sb.append("null");
    } else {
      sb.append(this.fromUsername);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toUsername:");
    if (this.toUsername == null) {
      sb.append("null");
    } else {
      sb.append(this.toUsername);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transAmount:");
    if (this.transAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.transAmount);
    }
    first = false;
    if (isSetRemarks()) {
      if (!first) sb.append(", ");
      sb.append("remarks:");
      if (this.remarks == null) {
        sb.append("null");
      } else {
        sb.append(this.remarks);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (bizNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bizNo' was not present! Struct: " + toString());
    }
    if (coinType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'coinType' was not present! Struct: " + toString());
    }
    if (transType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'transType' was not present! Struct: " + toString());
    }
    if (fromUsername == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fromUsername' was not present! Struct: " + toString());
    }
    if (toUsername == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'toUsername' was not present! Struct: " + toString());
    }
    if (transAmount == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'transAmount' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransferModelStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransferModelStandardScheme getScheme() {
      return new TransferModelStandardScheme();
    }
  }

  private static class TransferModelStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransferModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransferModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIZ_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bizNo = iprot.readString();
              struct.setBizNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coinType = iprot.readString();
              struct.setCoinTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transType = iprot.readString();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromUsername = iprot.readString();
              struct.setFromUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toUsername = iprot.readString();
              struct.setToUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANS_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transAmount = iprot.readString();
              struct.setTransAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remarks = iprot.readString();
              struct.setRemarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransferModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bizNo != null) {
        oprot.writeFieldBegin(BIZ_NO_FIELD_DESC);
        oprot.writeString(struct.bizNo);
        oprot.writeFieldEnd();
      }
      if (struct.coinType != null) {
        oprot.writeFieldBegin(COIN_TYPE_FIELD_DESC);
        oprot.writeString(struct.coinType);
        oprot.writeFieldEnd();
      }
      if (struct.transType != null) {
        oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
        oprot.writeString(struct.transType);
        oprot.writeFieldEnd();
      }
      if (struct.fromUsername != null) {
        oprot.writeFieldBegin(FROM_USERNAME_FIELD_DESC);
        oprot.writeString(struct.fromUsername);
        oprot.writeFieldEnd();
      }
      if (struct.toUsername != null) {
        oprot.writeFieldBegin(TO_USERNAME_FIELD_DESC);
        oprot.writeString(struct.toUsername);
        oprot.writeFieldEnd();
      }
      if (struct.transAmount != null) {
        oprot.writeFieldBegin(TRANS_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.transAmount);
        oprot.writeFieldEnd();
      }
      if (struct.remarks != null) {
        if (struct.isSetRemarks()) {
          oprot.writeFieldBegin(REMARKS_FIELD_DESC);
          oprot.writeString(struct.remarks);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransferModelTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransferModelTupleScheme getScheme() {
      return new TransferModelTupleScheme();
    }
  }

  private static class TransferModelTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransferModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransferModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.bizNo);
      oprot.writeString(struct.coinType);
      oprot.writeString(struct.transType);
      oprot.writeString(struct.fromUsername);
      oprot.writeString(struct.toUsername);
      oprot.writeString(struct.transAmount);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRemarks()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRemarks()) {
        oprot.writeString(struct.remarks);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransferModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.bizNo = iprot.readString();
      struct.setBizNoIsSet(true);
      struct.coinType = iprot.readString();
      struct.setCoinTypeIsSet(true);
      struct.transType = iprot.readString();
      struct.setTransTypeIsSet(true);
      struct.fromUsername = iprot.readString();
      struct.setFromUsernameIsSet(true);
      struct.toUsername = iprot.readString();
      struct.setToUsernameIsSet(true);
      struct.transAmount = iprot.readString();
      struct.setTransAmountIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.remarks = iprot.readString();
        struct.setRemarksIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

